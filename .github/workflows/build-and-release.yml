name: Build and Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Read version from file
        id: version_step
        run: |
          VERSION=$(cat VERSION) # Read the content of the VERSION file
          echo "TAG_VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          tags: |
            refiner:${{ steps.version_step.outputs.TAG_VERSION }}
            refiner:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Export image to file
        run: |
          docker save refiner:latest | gzip > refiner-${{ steps.version_step.outputs.TAG_VERSION }}.tar.gz

      - name: Generate release body
        run: |
          echo "Image SHA256: $(sha256sum refiner-${{ steps.version_step.outputs.TAG_VERSION }}.tar.gz | cut -d' ' -f1)" >> release_body.txt

      - name: Upload image
        uses: actions/upload-artifact@v4
        with:
          name: refiner-image
          path: refiner-${{ steps.version_step.outputs.TAG_VERSION }}.tar.gz

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version_step.outputs.TAG_VERSION }}
          name: Release v${{ steps.version_step.outputs.TAG_VERSION }}
          body_path: release_body.txt
          draft: false
          prerelease: false
          files: |
            ./refiner-${{ steps.version_step.outputs.TAG_VERSION }}.tar.gz

      - name: Log build result
        if: always()
        run: |
          if [ ${{ job.status }} == "success" ]; then
            echo "Build and release (v${{ steps.version_step.outputs.TAG_VERSION }}) completed successfully"
          else
            echo "Build and release (v${{ steps.version_step.outputs.TAG_VERSION }}) failed"
          fi